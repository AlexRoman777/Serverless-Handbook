AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Create the unicorn service api
Parameters:
  ApplicationName:
    Type: String
    Description: Name of owning application
  UserManagementStackName:
    Type: String
    Description: The name of the stack that contains the user management part, e.g the Cognito UserPool
  PDPStackName:
    Type: String
    Description: The name of the stack that contains the PDP service

Globals:
  Function:
    Timeout: 5
    MemorySize: 512
    Runtime: python3.12

Resources:
  LambdaRiderGet:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      InlineCode: |
        import json
        def lambda_handler(event, context):
            return {
        "statusCode": 200,
        "body": json.dumps({
          "message" : "Hello from LambdaRiderGet!"}),
        }
      Events:
        GetRidet:
          Type: Api
          Properties:
            Path: /rider
            Method: GET
            RestApiId:
              Ref: UnicornsApi

  LambdaRiderPost:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      InlineCode: |
        import json
        def lambda_handler(event, context):
            return {
        "statusCode": 200,
        "body": json.dumps({
          "message" : "Hello from LambdaRiderPost!"}),
        }
      Events:
        PostRider:
          Type: Api
          Properties:
            Path: /rider
            Method: POST
            RestApiId:
              Ref: UnicornsApi

  LambdaRiderList:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      InlineCode: |
        import json
        def lambda_handler(event, context):
            return {
        "statusCode": 200,
        "body": json.dumps({
          "message" : "Hello from LambdaRiderList!"}),
        }
      Events:
        ListRiders:
          Type: Api
          Properties:
            Path: /riders
            Method: GET
            RestApiId:
              Ref: UnicornsApi

  LambdaTrainerGet:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      InlineCode: |
        import json
        def lambda_handler(event, context):
            return {
        "statusCode": 200,
        "body": json.dumps({
          "message" : "Hello from LambdaTrainerGet!"}),
        }
      Events:
        GetTrainer:
          Type: Api
          Properties:
            Path: /trainer
            Method: GET
            RestApiId:
              Ref: UnicornsApi

  LambdaTrainerPost:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      InlineCode: |
        import json
        def lambda_handler(event, context):
            return {
        "statusCode": 200,
        "body": json.dumps({
          "message" : "Hello from LambdaTrainerPost!"}),
        }
      Events:
        PostTrainer:
          Type: Api
          Properties:
            Path: /trainer
            Method: POST
            RestApiId:
              Ref: UnicornsApi

  LambdaTrainerList:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      InlineCode: |
        import json
        def lambda_handler(event, context):
            return {
        "statusCode": 200,
        "body": json.dumps({
          "message" : "Hello from LambdaTrainerList!"}),
        }
      Events:
        ListTrainers:
          Type: Api
          Properties:
            Path: /trainers
            Method: get
            RestApiId:
              Ref: UnicornsApi

  LambdaUnicornGet:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      InlineCode: |
        import json
        def lambda_handler(event, context):
            return {
        "statusCode": 200,
        "body": json.dumps({
          "message" : "Hello from LambdaUnicornGet!"}),
        }
      Events:
        HelloGetUnicornWorld:
          Type: Api
          Properties:
            Path: /unicorn
            Method: GET
            RestApiId:
              Ref: UnicornsApi

  LambdaUnicornPost:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      InlineCode: |
        import json
        def lambda_handler(event, context):
            return {
        "statusCode": 200,
        "body": json.dumps({
          "message" : "Hello from LambdaUnicornPost!"}),
        }
      Events:
        PostUnicorn:
          Type: Api
          Properties:
            Path: /unicorn
            Method: POST
            RestApiId:
              Ref: UnicornsApi

  LambdaUnicornList:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      InlineCode: |
        import json
        def lambda_handler(event, context):
            return {
        "statusCode": 200,
        "body": json.dumps({
          "message" : "Hello from LambdaUnicornList!"}),
        }
      Events:
        ListUnicorns:
          Type: Api
          Properties:
            Path: /unicorns
            Method: GET
            RestApiId:
              Ref: UnicornsApi

  UnicornsApi:
    Type: AWS::Serverless::Api
    Properties:
      Description: API for managing Unicorn resources
      Name: !Sub ${ApplicationName}-unicorns-api
      StageName: prod
      OpenApiVersion: '3.0.1'
      AlwaysDeploy: true
      EndpointConfiguration: REGIONAL
      Cors:
        AllowMethods: "'GET,PUT,POST,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Auth:
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          LambdaRequestAuthorizer:
            FunctionArn: !GetAtt LambdaApiAuthorizer.Arn
            FunctionPayloadType: REQUEST
            Identity: 
              Headers: 
                - Authorization
              ReauthorizeEvery: 600
        DefaultAuthorizer: LambdaRequestAuthorizer

  LambdaApiAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Lambda/Authorizer/
      Handler: auth.handler
      Policies:
        - LambdaInvokePolicy:
            FunctionName: 
              Fn::ImportValue: !Sub ${PDPStackName}:pdp-lambda-name
      Environment:
        Variables:
          JWKS_URL:
            Fn::ImportValue: !Sub ${UserManagementStackName}:jwks-url
          AUDIENCE:
            Fn::ImportValue: !Sub ${UserManagementStackName}:app-audience
          PDP_AUTHZ_ENDPOINT: 
            Fn::ImportValue: !Sub ${PDPStackName}:pdp-lambda-name
